<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>没事瞎思考</title>
    <link>http://gfzeng.github.io/</link>
    <description>没事瞎思考</description>
    <pubDate>Thu, 29 Jun 2017 15:55:06 HKT</pubDate>
    <lastBuildDate>Thu, 29 Jun 2017 15:55:06 HKT</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>一种出票算法</title>
      <link>http://gfzeng.github.io/blog/2016/11/11/一种出票算法/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>一种出票算法</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org799ce8d">1. 几个小结论</a></li>
<li><a href="#orgd89b51d">2. 模拟卖票</a>
<ul>
<li><a href="#org5004012">2.1. 出票规则</a></li>
<li><a href="#orgeb1b783">2.2. 判断座位在某站点区间是否可用</a></li>
</ul>
</li>
<li><a href="#org5626164">3. 出票算法</a></li>
<li><a href="#orgc28903f">4. 总结</a></li>
</ul>
</div>
</div>
<p>
12306 一度处在风口上, 2013 年之前听到的多是骂声，幸好之后有大牛正名。正名之后渐渐的就有人开始写关于 12306 相关的技术文章了，看的多了之后，也渐渐开始思考。
</p>

<p>
其中有一篇文章从电商的角度分析了 12306，认为 12306 的票是一种商品，每种可能的票都是一个 <code>SKU</code> ，假设有 ABCD 四个站，就分别有 AD，AC，BD，AB，BC，CD 这 6 种 SKU。假设有 10 个站， 那么就有 45 个 SKU 了，SO，结论是 12306 是一个相当复杂的系统……
</p>

<p>
我个人认为，并不能把票看做一种简单的 <code>SKU</code> ， <code>SKU</code> 真正的含义是库存单位，就是一个买卖的最小单位。同样假设有 ABCD 4 个站，列车共有 10 个座位，一开始，任何种类的票都有 10 张，我买了 1 张 AD 的票之后， 任何票种都只剩下 9 张票了，AD 作为一个 SKU 明显影响了其他的 SKU 的数量，所以这样看是不对的。
</p>

<p>
现在我们知道， 不能把票看做一种 <code>SKU</code> 来处理， 但是这个类比却引发我一个思考，这个类比错误之处在于没有试图找出票的最小单位 —— 1 站 × 1 座位。以最小单位来当做 <code>SKU</code> 结果会如何了，仍然行不通，假如我买了 BC 区间 6 号座位票，那么 AD 区间的 6 号座位的票是卖不出去的， 尽管在 AB 和 CD 区间我并没有占有 6 号座位，这就导致了，AB 和 CD 可以单独卖 6 号座位的票，但就是不能卖跨越 BC 的 6 号座位的票。
</p>

<p>
上述例子实际是基于一个规则，就是不能要求乘客中途换座位，假如可以的话，我明显可以让乘客 AB 和 CD 的时候坐 6 号座位，BC 坐其他座位了，那么 6 号座位全程是满的，这对于列车来说倒是再好不过了。
</p>

<div id="outline-container-org799ce8d" class="outline-2">
<h2 id="org799ce8d"><span class="section-number-2">1</span> 几个小结论</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>票的最小单位是 1 站 × 1 座位</li>
<li>一张票必须是连续站区间的，不能 AB，CD 绑在一张票上，如果有人有这个需求，那他就买 2 张票吧</li>
<li>不能要求乘客中途换座位</li>
<li>没有站票（好像没有这个规定😁 ， 这是我简化问题引入的）</li>
</ol>
</div>
</div>

<div id="outline-container-orgd89b51d" class="outline-2">
<h2 id="orgd89b51d"><span class="section-number-2">2</span> 模拟卖票</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="http://oczr2280k.bkt.clouddn.com/12306-sell-ticket.png">12306 sell ticket</a>
如上图所示，甲买了 cd 2 个站 1 号座位的票，现在如果乙需要买 abc 3 个站的票，那他只能买 2 号座位了，现在我们来看看丙，丙需要买 de 2 个站的票，分配 3 号座位给丙并不是不可以，但是不合理，因为这使得 3 号座位可以组合的票种变少了，卖出去的可能降低，期望利润降低了，丙分配到 2 号位置是最合理的。
</p>
</div>

<div id="outline-container-org5004012" class="outline-3">
<h3 id="org5004012"><span class="section-number-3">2.1</span> 出票规则</h3>
<div class="outline-text-3" id="text-2-1">
<p>
基于上述例子，我们来设计一个合理的出票规则：确定票的站区间，从上至下找到一个不和其他票冲突的座位（也就是图形中的色块不重叠）。
</p>

<p>
这里有 2 个关键点：
</p>
<ul class="org-ul">
<li>「从上至下」保证了座位利用率最高</li>
<li>「不冲突（色块不重叠）」代表改座位在该区间可用</li>
</ul>

<p>
<a href="http://oczr2280k.bkt.clouddn.com/1230-best-ticket.png">12306 best ticket</a>
丙 de 2 个站的票从上到下找到 2 号座位，最终得到上图结果。我们把卖出去的票（着色区域）标记为数字 0，没卖出的标记为数字 1，那么我们就得到了一张内存图。1 站 × 1 座位就是一个 bit 位，我们每一行（每 1 个座位）用一个 <code>unsiged long</code>  数字代表，就可以代表 64 个站区间，一条线路 65 个站应该满足我们国家需求了😁 。
</p>
</div>
</div>

<div id="outline-container-orgeb1b783" class="outline-3">
<h3 id="orgeb1b783"><span class="section-number-3">2.2</span> 判断座位在某站点区间是否可用</h3>
<div class="outline-text-3" id="text-2-2">
<p>
拿丙来说，丙买了 de 2 个站点的票，根据我们内存图模型，他买了一张这样的票
</p>

<blockquote>
<p>
0000000000000000000000000000000000000000000000000000000000011000「= 24」
</p>
</blockquote>

<p>
应该倒过来看这一串数字，后面 3 个「0」 代表 abc 3 个站区间，2 个「1」 代表 de 2 个站区间。这张票一串二进制数字就代表 「24」，为了方便，我们称 「24」 为这张票的 ticket value (t-site)；同样，座位占用了的区间标为「0」，可使用的区间标为 「1」， 得到座位的 ticket value (t-seat)。那么判断座位是否可用的方法就是：
</p>

<blockquote>
<p>
t-site &amp; t-seat = t-site
</p>
</blockquote>

<p>
确定座位的可用性之后，如果决定出票，只需要用 <code>t-seat</code> 减去 <code>t-site</code> 作为新的 <code>t-seat</code>
</p>
</div>
</div>
</div>

<div id="outline-container-org5626164" class="outline-2">
<h2 id="org5626164"><span class="section-number-2">3</span> 出票算法</h2>
<div class="outline-text-2" id="text-3">
<p>
现在我们来确定一下出票步骤：
</p>
<ol class="org-ol">
<li>计算客户要购买的票的 ticket value t-site</li>
<li>找到一个座位满足 t-site &amp; t-seat = t-site</li>
<li>出票，更新该座位的 t-seat = t-seat - t-site</li>
</ol>

<p>
需要注意的是：2、3 步骤得是一个原子操作。
</p>
</div>
</div>

<div id="outline-container-orgc28903f" class="outline-2">
<h2 id="orgc28903f"><span class="section-number-2">4</span> 总结</h2>
<div class="outline-text-2" id="text-4">
<p>
我相信，采用这种出票算法，对于<a href="http://www.csdn.net/article/2015-02-10/2823900"> 12306 尖峰日 PV 值 297 亿下可每秒出票 1032 张</a>, 不采用内存计算进行优化，直接采用 PostgreSQL 就可以搞定了，每辆列车一个 table 保存所有座位的 ticket value， 不过 😝 ， 当然只是指出票而已，车票系统还有很多其他问题需要考虑。不过貌似看这文章，12306 的票是预先分配好的，然后每 2 分钟更新一次。
</p>

<p>
本人并没有参与过 12306 相关的工作，此文仅仅是个人的一点小思考而已，没有对 12306 构成任何点评！
</p>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2017-03-13</pubDate>
      <guid>http://gfzeng.github.io/blog/2016/11/11/一种出票算法/</guid>
    </item>
    <item>
      <title>一个西瓜切 4 最多有多少块？</title>
      <link>http://gfzeng.github.io/blog/2016/11/21/一个西瓜切-4-最多有多少块？/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>一个西瓜切 4 最多有多少块？</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org730ab01">1. 应该先提供答案吗？</a></li>
<li><a href="#orgb3169f6">2. 给大家打一个镇定剂</a></li>
<li><a href="#orgbec2514">3. 西瓜切 4 刀是什么概念？</a>
<ul>
<li><a href="#orgc7823df">3.1. 结论</a></li>
</ul>
</li>
<li><a href="#org9d4d319">4. 什么是切割？</a>
<ul>
<li><a href="#org1d5d02a">4.1. 定义切割</a></li>
</ul>
</li>
<li><a href="#org78be372">5. 总结</a></li>
<li><a href="#org4bbc1ee">6. 公式</a></li>
<li><a href="#org7eed59a">7. 答案</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
这不是发散思维问题
</p>
</blockquote>

<p>
这不是发散思维问题， 所以无数块这种回答可以路过了。
</p>

<p>
我在大二的时候，对这个问题进行了深入分析，最终得到一个通用的空间切割公式，无论多少纬空间都适用。记得当时和我的数学老师讨论这个问题后，他叫我写篇文章发表出去。不过最终没发表成功：
</p>
<blockquote>
<ol class="org-ol">
<li>我不是教授；</li>
<li>文章太短，废话太少；</li>
</ol>
</blockquote>

<p>
大家如果觉得我分析的原因是开玩笑的话，试问你们在中国论文数据库里面搜索到几篇对你有帮助的论文。这年代，只要你是个教授，把已知公式的行列式展开都能重新发表。好像跑题了，好吧，咱们继续。
</p>

<div id="outline-container-org730ab01" class="outline-2">
<h2 id="org730ab01"><span class="section-number-2">1</span> 应该先提供答案吗？</h2>
<div class="outline-text-2" id="text-1">
<p>
想了一下，还是不了，给一些喜欢思考的朋友提供思维空间，实在喜欢直接看答案的跳到文章最后去吧。
</p>

<p>
BTW: 切 3 刀都答错的人，重新爬回妈的肚子吧。
</p>
</div>
</div>

<div id="outline-container-orgb3169f6" class="outline-2">
<h2 id="orgb3169f6"><span class="section-number-2">2</span> 给大家打一个镇定剂</h2>
<div class="outline-text-2" id="text-2">
<p>
初看这个问题，貌似需要很强的空间思维能力，关于这个，你可以放心，看完这篇文章，发现这压根只需要 0 维空间想象级别。0 维？那就是不需要。
</p>
</div>
</div>

<div id="outline-container-orgbec2514" class="outline-2">
<h2 id="orgbec2514"><span class="section-number-2">3</span> 西瓜切 4 刀是什么概念？</h2>
<div class="outline-text-2" id="text-3">
<p>
西瓜，那就是一个 3 维空间，切 4 刀，相当于用 4 个平面去切割，把这 4 个平面向 3 维空间延伸一下，会变成什么样？
</p>

<p>
好了，先不回答这个问题，先降维讨论 1 维空间的切割问题，那就是 4 个点切一条线，4 个点（0 维）向 2 维空间延伸一下，会变成 4 条线切一条线。如图：
</p>


<div class="figure">
<p><img src="http://oczr2280k.bkt.clouddn.com/cut-line.png" alt="cut-line.png" />
</p>
</div>

<p>
上面转换我们把 4 个点切直线问题，变成了 4 条线切直线问题，这是因为线与线相交得到点，最终实际起到切割作用的是点。推广来， <code>d-1</code> 空间切割 <code>d</code> 维空间也可以转换成 <code>d</code> 维切割 <code>d</code> 维空间，因为 <code>d</code> 维和 <code>d</code> 维相交得到 <code>d-1</code> 维空间，实际起到切割作用的就是这 <code>d-1</code> 维空间。
</p>

<p>
上诉转换方式看起来既无意义，也很白痴，不过，请相信我，你想记住这个 <b>重要</b> 的转换，因为我们马上要用到了。
</p>
</div>

<div id="outline-container-orgc7823df" class="outline-3">
<h3 id="orgc7823df"><span class="section-number-3">3.1</span> 结论</h3>
<div class="outline-text-3" id="text-3-1">
<p>
<code>d-1</code> 为空间切割 <code>d</code> 维空间也可以转换成 <code>d</code> 维切割 <code>d</code> 维空间。
</p>
</div>
</div>
</div>

<div id="outline-container-org9d4d319" class="outline-2">
<h2 id="org9d4d319"><span class="section-number-2">4</span> 什么是切割？</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-org1d5d02a" class="outline-3">
<h3 id="org1d5d02a"><span class="section-number-3">4.1</span> 定义切割</h3>
<div class="outline-text-3" id="text-4-1">
<blockquote>
<p>
切割是从一个区域的边界进入，从另外一个边界出去。
</p>
</blockquote>

<p>
以线切割一个矩形例子， 从一条边进入，从另外一条边出去， 这样就把矩形分成了 2 半，我们假设这次是横着穿过矩形的，用的直线 A。现在在竖着用直线 B 切割一次如何，我们将矩形分成了 4 块。第一次切割得到 2 块， 第二次切割得到 4 块，相比第一次多了 2 块，这 2 块从哪里来的？这 2 块来自于第二条直线 B 切割了两个区域 &#x2014; 白色和灰色区域，B 直线从上到下两次出入边界，而 A 是一条特殊边界，黑色和白色共享的，B 与其相交既是从边界 A 离开白色区域，也是从边界 A 进入灰色区域。我们暂且称 A 这类边界为切割边界。很明显，当我们完成 B 的切割，B 本身也就成了切割边界。
</p>


<div class="figure">
<p><img src="http://oczr2280k.bkt.clouddn.com/cut-square.png" alt="cut-square.png" />
</p>
</div>

<p>
下面我们依次用 B，C，D 直线来切割矩形：
</p>

<ol class="org-ol">
<li>根据切割定义，B 切割了几个区域，取决于 B 与切割边界 A 相交了多少次，反过来说，切割边界 A 可以把 B 分成几个区域？ 这等价于用 1 个点切割直线 B，可以分成几个区域，答案是 2 个。得到总区域数：=2 + 2 = 4=</li>

<li>现在用第 3 条直线 C 来切割矩形，C 能切割几个区域了？用 2 个点分隔直线 C (A, B 2 个切割边界去切 C)， 得到答案是 3。总分隔的区域数是： <code>4 + 3 = 7</code></li>

<li>用第 4 条直线切割，我不分析了，总区域数是：=7 + 4 = 11=</li>

<li>&#x2026;</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-org78be372" class="outline-2">
<h2 id="org78be372"><span class="section-number-2">5</span> 总结</h2>
<div class="outline-text-2" id="text-5">
<ol class="org-ol">
<li><p>
n 条直线切割平面，最多可以切割成几个区域？
</p>
<blockquote>
<p>
n - 1 条直线切割完成时，得到 y(n-1) 个区域，同时具有 n - 1 个切割边界，n - 1 个点可以把第 n 条直线切成 n 块，所以有：
</p>

<p>
y(n) = y(n-1) + n, 其中 y(0) = 1
</p>

<p>
y(0) 代表没有切割， 那就是一整个平面区域。
</p>
</blockquote></li>

<li><p>
d 维空间切割 n 次， 最多可以切割成几个区域？
</p>
<blockquote>
<p>
设分隔的区域数为二元函数：y(d, n), 那么 n - 1 次完成后，得到 y(d, n-1) 个区域，同时具有 n - 1 个切割边界, 第 n 次用空间 D (d-1 维空间) 切割时，能切割区域数等价于 D 空间切割 n - 1 次的区域数 y(d-1, n-1), 那么可以得:
</p>

<p>
y(d, n) = y(d, n-1) + y(d-1, n-1)
</p>

<ol class="org-ol">
<li>其中对于任何 n 有 y(0, n) = 1（点无论切割几次，只有一个点）</li>
<li>对于任何 d 有 y(d, 0) = 1（无论几维空间， 切割 0 次都是空间自己本身）</li>
</ol>
</blockquote></li>

<li><p>
看图说话
</p>


<div class="figure">
<p><img src="http://oczr2280k.bkt.clouddn.com/cut-watermelon.png" alt="cut-watermelon.png" />
</p>
</div>

<p>
观察 L 形的蓝色区域，你会发现，表格中的任何一处都有这个规则，？六个读者填了，其中紫色的？号就是文章标题的答案。
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org4bbc1ee" class="outline-2">
<h2 id="org4bbc1ee"><span class="section-number-2">6</span> 公式</h2>
<div class="outline-text-2" id="text-6">
<p>
不提供公式证明了，d 维空间切割 n 次做多分割数维为：
</p>

<p>
y(d, n) = C(n, d) + C(n, d - 1) + &#x2026; + C(n, 0)
</p>

<p>
其中 C(p, q) 代表组合数, 从 p 中取 q 个的组合数。
</p>
</div>
</div>

<div id="outline-container-org7eed59a" class="outline-2">
<h2 id="org7eed59a"><span class="section-number-2">7</span> 答案</h2>
<div class="outline-text-2" id="text-7">
<p>
标题答案是 15 
</p>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-11-30</pubDate>
      <guid>http://gfzeng.github.io/blog/2016/11/21/一个西瓜切-4-最多有多少块？/</guid>
    </item>
    <item>
      <title>SQL 进化史</title>
      <link>http://gfzeng.github.io/blog/2016/11/25/sql-进化史/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>SQL 进化史</h1>
<blockquote>
<p>
SQL 与 NoSQL 的恩怨史，说这个话题要被骂的。
</p>
</blockquote>


<p>
大数据的兴起，加快了数据库技术的发展。先来看看 SQL 的进化史：
</p>
<ol class="org-ol">
<li>We have no SQL</li>
<li>SQL</li>
<li>NoSQL</li>
<li>Not Only SQL</li>
<li>No, SQL</li>
</ol>

<p>
好吧，这其实是个笑话，但很遗憾，NoSQL 的狂热分子们，这其实不是个笑话。虽然 NoSQL 绕一圈，回到 SQL， 但是对 SQL 的推动是巨大的，数据库的功能越来越丰富，稳定性原来越强大，分布式支持越来越好。
</p>

<p>
其实没有完全回到原点，NoSQL 最终的定位是第 4 阶段 -&#x2013;&#x2014; Not Only SQL，但是在 NoSQL 的推动下，SQL 也最终成了 Not Only SQL。 所以二者的界限是越来越模糊了，几乎无法区分，最常用的区分方式是，支持分布式的是 NoSQL，不支持的是 SQL。 但其实是不是 NoSQL，跟分布式根本就没有关系，只是该数据库的实现支持了分布式而已，NoSQL 在一开始就支持了分布式，为了便于推广，把分布式绑在自己身上而已。
</p>

<p>
说了一大摊子，说来说去，SQL，NoSQL 其实都是一个样，包装不同而已，想学习数据库知识的，还是看传统的，关于 SQL 的书籍好，比如 PostgreSQL。市面上的 NoSQL 一般不会讲很基础的东西，因为这并不是他的卖点。不说了，看书去了，为下次吹牛做准备。
</p>

</div>
</div>]]></description>
      <pubDate>2016-11-30</pubDate>
      <guid>http://gfzeng.github.io/blog/2016/11/25/sql-进化史/</guid>
    </item>
    <item>
      <title>Mac 输入法切换 Bug</title>
      <link>http://gfzeng.github.io/blog/2016/11/30/mac-输入法切换-bug/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>Mac 输入法切换 Bug</h1>
<blockquote>
<p>
如果你和我一样被 Mac 的这个问题困扰很久，那么你很幸运。
</p>
</blockquote>

<p>
问题是这样的，状态栏显示的你已经切换到「中文」状态了，但是输入的还是英文，切回「英文」状态，输入的仍然是英文，总之你就不能成功切换成「中文」输入法。而有时，这个问题是反过来的，无论你怎么切换都只能输入中文。
</p>

<p>
自从 Cook 大爷上台后，Mac 系统越来越不稳定， 不少同事朋友都吐槽。最近我遇到这个输入法不能准确切换的问题，出现的概率极其低，我使用的两台 Mac，一台有这个问题，一台没有。问同事，他们使用都正常，问 Google，根本没有类似情况。无赖之下只得勉强使用，输入法切换不成功就多切几次。
</p>

<p>
这一忍，1 个月过去了，是在受不了了，所谓「忍无可忍，无需再忍」。使用 Windows 去，当然不是，哥是这么没追求的人吗？我决定把所有跟输入法相关的程序都干掉，挨个重启试试，最后终于找到罪魁祸首。下面我来教你怎么解决这个问题：
</p>

<ol class="org-ol">
<li>打开 <code>Activity Monitor</code></li>
<li>找到 <code>TISwitcher</code> 这个进程，干掉就 OK 了</li>
<li>为了防止重启后，这个进程再次启动， 直接删掉 <code>/System/Library/CoreServices/Menu Extras/TextInput.menu/Contents/SharedSupport/TISwitcher.app</code></li>
</ol>

<p>
比较简单，不图示了。 <code>TISwitcher</code> 这个进程干啥用的，按住 <code>control</code> 键，不停的敲 <code>空格</code> 就可了看到这个进程的面貌了，对于使用 <code>command + space</code> 切换输入法的， <code>control</code> 换成 <code>command</code> 即可。 <code>TISwitcher</code> 干掉没有任何影响，反正你切换一次输入法是看不到他面貌的，而且多数情况，你只需要来回切换，一次切换动作就够。
</p>

</div>
</div>]]></description>
      <pubDate>2016-11-30</pubDate>
      <guid>http://gfzeng.github.io/blog/2016/11/30/mac-输入法切换-bug/</guid>
    </item>
    <item>
      <title>Clojure Lazy Sequence Snooping</title>
      <link>http://gfzeng.github.io/blog/2016/11/10/clojure-lazy-sequence-snooping/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>Clojure Lazy Sequence Snooping</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org5d37f1d">1. 定义无穷序列</a>
<ul>
<li><a href="#org5efda11">1.1. 无穷 Fibnoacci 序列</a></li>
<li><a href="#org804665d">1.2. 无穷素数序列</a></li>
</ul>
</li>
<li><a href="#org1c926b6">2. 动态作用域陷阱</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
Lazy 的好处是你不会撑死
</p>
</blockquote>

<p>
我是说真的，Lazy 不会吃爆内存， 用多少取多少，按需提供，这才是正确的生产方式。下面我们来见识一下 Lazy 的优势。
</p>

<p>
先说明一下，本文所有的 Lazy 是指 Lazy Sequence
</p>

<div id="outline-container-org5d37f1d" class="outline-2">
<h2 id="org5d37f1d"><span class="section-number-2">1</span> 定义无穷序列</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-org5efda11" class="outline-3">
<h3 id="org5efda11"><span class="section-number-3">1.1</span> 无穷 Fibnoacci 序列</h3>
<div class="outline-text-3" id="text-1-1">
<p>
下面我们来定义一个无穷的 Fibonacci 数列，随便你取多少个，只要你的内存允许。下述定义采取了这个规则：第 <code>N</code> 项是 <code>N-1</code> 和 <code>N-2</code> 项的和。知道第 1，2 项 <code>[0 1]</code> 就知道所有项了。
</p>
<div class="org-src-container">
<pre class="src src-clojure">(def fib-seq (lazy-cat [0 1] (map + fib-seq (rest fib-seq))))
</pre>
</div>
</div>
</div>

<div id="outline-container-org804665d" class="outline-3">
<h3 id="org804665d"><span class="section-number-3">1.2</span> 无穷素数序列</h3>
<div class="outline-text-3" id="text-1-2">
<p>
换个规则，我们采取同样的方式定义素数，素数有这么一个规则: 假设我们找到了前 <code>N</code> 个素数，那么第 <code>N+1</code> 个素数的寻找方法是（假设第 <code>N</code> 个素数是 x），设定 <code>x+1</code> ，如果 <code>x+1</code> 不能整除 <code>N</code> 个素数当中的任何一个， <code>x+1</code> 就是第 <code>N+1</code> 个素数，如果能整除，那么设定 <code>x+2</code> 继续继续判断， 直到找到为止。最后，我不提供证明，其实我不会。
</p>

<p>
利用排除法解这个问题：
</p>
<ol class="org-ol">
<li>首先，列出从 2 开始的所有自然数 （2 是第一个素数）</li>
<li>然后剔除掉所有能被 2 整除的数， 那么列表中下一个数就是 3， 也就是第 2 个素数。</li>
<li>然后剔除掉所有能被 3 整除的数，那么列表中下一个数就是 5， 也就是第 3 个素数。</li>
<li>&#x2026;</li>
</ol>
<div class="org-src-container">
<pre class="src src-clojure">(def prime-seq
  ((fn filter-prime [[x &amp; xs]]
     (cons x
           (lazy-seq
            (filter-prime (remove #(zero? (mod % x)) xs)))))
   (drop 2 (range))))
</pre>
</div>

<p>
Lazy 的好处就是，如果没有 Lazy， 上诉第 1 步 <code>所有自然数</code> 都是不可能的。有了 Lazy，很多在我们头脑中的概念可以轻易表达了。
</p>
</div>
</div>
</div>

<div id="outline-container-org1c926b6" class="outline-2">
<h2 id="org1c926b6"><span class="section-number-2">2</span> 动态作用域陷阱</h2>
<div class="outline-text-2" id="text-2">
<p>
说了这么多 Lazy 的好处，如果你们想用它，我觉得有必要提一下他的陷阱。我们通过上面的例子，可以看出，使用 Lazy 的前提条件你的知道持续生成的规则，这就相当于某个生产机器。如果机器内部的某个零件被更换了，那么你下次生产出来的产品有可能就不合格了。当然，这对于函数式语言来说，这生产机器就是个黑盒子，一旦造好，就不可篡改，这可以减少很多 Bug，但是仍然免不了需要引用某个外部变量，这个时候，正确性就不保证了，我们来看下面这个例子：
</p>
<div class="org-src-container">
<pre class="src src-clojure">(def ^:dynamic *x* 3)

(def xs
  (binding [*x* 7]
    (map (partial + *x*) (range 10))))

(println xs)
;;=&gt; (3 4 5 6 7 8 9 10 11 12)
</pre>
</div>

<p>
上诉程序我们期望得到的结果是 <code>(7 8 9 ...)</code> , 这是因为你设定 <code>*x*</code> 为 7 的时候，机器并没有生产，正式生产数据时， <code>*x*</code> 又变回 3 了。 有什么办法解决吗？答案是有的，在机器的类比中，我们可以复制一个 <code>*x*</code> 让其变为内部变量，这也就是所谓的闭包。
</p>
<div class="org-src-container">
<pre class="src src-clojure">(def ^:dynamic *x* 3)

(def xs
  (binding [*x* 7]
    (let [x *x*]
      (map (partial + x) (range 10)))))

(println xs)
;;=&gt; (7 8 9 10 11 12 13 14 15 16)
</pre>
</div>

<p>
现在是我们想要的结果了。我们既然这么采取复制的方式来保证纯洁性，那么我们是否可以禁止 Clojure 的可变变量共享，这当然是可以，但是这样因小失大了。我提到过，这是陷阱，不是缺陷，如果我们这么做，那么我们就不能重用规则了（机器）。我们让机器允许自定义参数，每个使用的人自己调整一下参数就可以工作，不需要每个人都造一台机器是不是？
</p>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-11-25</pubDate>
      <guid>http://gfzeng.github.io/blog/2016/11/10/clojure-lazy-sequence-snooping/</guid>
    </item>
    <item>
      <title>如何使用 Org Mode 写文章</title>
      <link>http://gfzeng.github.io/blog/2016/11/10/如何使用-org-mode-写文章/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>如何使用 Org Mode 写文章</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org0321323">1. 为什么要用 Org Mode</a></li>
<li><a href="#org0090d91">2. Markdown 有 Markdown Here，Org 有什么？</a></li>
<li><a href="#orge0617c3">3. Org Mode 文学编程</a></li>
</ul>
</div>
</div>


<div id="outline-container-org0321323" class="outline-2">
<h2 id="org0321323"><span class="section-number-2">1</span> 为什么要用 Org Mode</h2>
<div class="outline-text-2" id="text-1">
<p>
Org Mode 是一种类似于 Markdown 格式的标记语言，功能要比 Markdown 强大很多。
</p>

<ul class="org-ul">
<li>GTD</li>
<li>Literal Programming</li>
<li>Agenda</li>
</ul>
</div>
</div>

<div id="outline-container-org0090d91" class="outline-2">
<h2 id="org0090d91"><span class="section-number-2">2</span> Markdown 有 Markdown Here，Org 有什么？</h2>
<div class="outline-text-2" id="text-2">
<p>
Org 有 <code>O-&gt;M here</code> &#x2014; 这是什么鬼。哈哈，Emacs 可以很方便的把 Org 格式输出为 Markdown 格式，写完文章，一个快捷键就 Copy 好了 Markdown， 直接粘贴到微信后台。这一流程就变成了，  <code>Org -&gt; Markdown -&gt; Markdown Here</code> 。 好吧， 我作弊了。
</p>
</div>
</div>

<div id="outline-container-orge0617c3" class="outline-2">
<h2 id="orge0617c3"><span class="section-number-2">3</span> Org Mode 文学编程</h2>
<div class="outline-text-2" id="text-3">
<p>
作为一个程序员，这个真是太好用了
</p>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-11-25</pubDate>
      <guid>http://gfzeng.github.io/blog/2016/11/10/如何使用-org-mode-写文章/</guid>
    </item>
  </channel>
</rss>